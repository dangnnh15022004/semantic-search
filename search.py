from sentence_transformers import SentenceTransformer
from pinecone import Pinecone
import os

# === Th√¥ng tin Pinecone ===
PINECONE_API_KEY = "pcsk_4Em9zF_NcfUg4U1n3tGfMVGqnuLv4KudrMs1CeKBnsSRSkQPokMuhsujXuCy8M6aRExKhJ"  # ·∫©n b·ªõt n·∫øu public code
INDEX_NAME = "semantic-fashion"

# === Kh·ªüi t·∫°o Pinecone v√† k·∫øt n·ªëi index ===
pc = Pinecone(api_key=PINECONE_API_KEY)
index = pc.Index(INDEX_NAME)

# === Load model ===
model = SentenceTransformer('all-MiniLM-L6-v2')

# === Nh·∫≠p truy v·∫•n ng∆∞·ªùi d√πng ===
query = input("üîé Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m: ")
query_embedding = model.encode([query])[0].tolist()

# === Truy v·∫•n top 5 vector g·∫ßn nh·∫•t ===
results = index.query(
    vector=query_embedding,
    top_k=5,
    include_metadata=True
)

# === Hi·ªÉn th·ªã k·∫øt qu·∫£ ===
print("\nüìå K·∫øt qu·∫£ t√¨m ki·∫øm:")
for i, match in enumerate(results['matches'], 1):
    print(f"\n{i}. ID: {match['id']}")
    print(f"   T√™n SP: {match['metadata']['productDisplayName']}")
    print(f"   M√¥ t·∫£: {match['metadata']['text']}")
    print(f"   ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng: {match['score']:.4f}")
